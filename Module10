from math import gcd


class Fraction:
    def __init__(self, numérateur, dénominateur):
        if dénominateur == 0:
            raise ValueError("Le dénominateur ne peut pas être 0")
        
        diviseur = gcd(numérateur, dénominateur)
        self.numérateur = numérateur // diviseur
        self.dénominateur = dénominateur // diviseur

    def __str__(self):
        if self.numérateur == 0:
            return f"0/{self.dénominateur}"
        return f"{self.numérateur}/{self.dénominateur}"
    
    def __add__(self, other):
        if not isinstance(other, Fraction):
            raise TypeError("L'opérande doit être une instance de Fraction")
        nouveau_numérateur = (
            self.numérateur * other.dénominateur
            + other.numérateur * self.dénominateur)
        nouveau_dénominateur = (
            self.dénominateur * other.dénominateur
        )
        return Fraction(nouveau_numérateur, nouveau_dénominateur)

    def __sub__(self, other):
        if not isinstance(other, Fraction):
            raise TypeError("L'opérande doit être une instance de Fraction")
        nouveau_numérateur = (
            self.numérateur * other.dénominateur
            - other.numérateur * self.dénominateur)
        nouveau_dénominateur = (
            self.dénominateur * other.dénominateur
        )
        return Fraction(nouveau_numérateur, nouveau_dénominateur)
    
    def __mul__(self, other):
        if not isinstance(other, Fraction):
            raise TypeError("L'opérande doit être une instance de Fraction")
        nouveau_numérateur = (
            self.numérateur * other.numérateur
        )
        nouveau_dénominateur = (
            self.dénominateur * other.dénominateur
        )
        return Fraction(nouveau_numérateur, nouveau_dénominateur)
    